{
  "author": {
    "name": "Manuel Astudillo",
    "email": "manuel@optimalbits.com",
    "url": "http://optimalbits.com"
  },
  "name": "navcodec",
  "description": "libavcodec bindings for node",
  "version": "0.3.4",
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec --bail --globals requirejsVars test/simple.test.js",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/OptimalBits/navcodec.git"
  },
  "engines": {
    "node": ">=0.6.10"
  },
  "dependencies": {
    "underscore": "*",
    "async": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "gypfile": true,
  "readme": "Node Audio and Video Transcoding Library [![BuildStatus](https://secure.travis-ci.org/OptimalBits/navcodec.png?branch=master)](http://travis-ci.org/optimalbits/navcodec)\n=\n\n*navcodec* provides a high level and flexible javascript module for video and audio transcoding based on the excelent [libavcodec](http://libav.org)(from the FFmpeg team) library.\n\nThis module can transcode almost any known video and audio format efficiently, it can generate multiple thumbnails or output video in multiple resolutions in parallel quickly with low memory consumption while also optimizing the output for web reproduction.\n\n\nFollow [optimalbits](http://twitter.com/optimalbits) for news and updates regarding this library.\n\n#Examples\n\nTranscoding\n-\n\n\tnavcodec = require('navcodec');\n\t\n\tnavcodec.open('myinput.mov', function(err, media){\n\t  if(media){\n\t    media.addOutput('myoutput.mp4', {\n\t    \twidth:640,\n\t    \theight:480,\n\t    \taudioBitrate:128000,\n\t    \tvideoBitrate:500000\n\t    });\n\t    \n\t    media.transcode(function(err, progress, finished, time){\n\t      console.log(progress);\n\t      if(finished){\n\t        console.log('total transcoding time:'+time);\n\t      }\n\t    }\n\t  }\n\t});\n\n\nThis will transcode myinput.mov into myoutput.mp4 according to the given options. The callback will be called with a progress variable between 0 and 100.\n\nSince the transcode uses mostly *libavcodec* optimized functions, the above example will run really fast.\n\nAvailable options (and their defaults):\n\n    // Video\n    width ( input width )\n    height (input height )\n    videoBitrate (input bitrate if available, 0 otherwise)\n    videoCodec ( standard codec for current file container)\n    keepAspectRatio (true)\n    skipVideo (false)\n    skipVideoFrames (0)*\n    \n    // Audio\n    audioBitrate (input bitrate if available, 0 otherwise)\n    sampleRate (44100)\n    channels (2),\n    audioCodec (standard codec for current file container)\n    skipAudio (false)\n  \n    // Thumbnails\n    keepAspectRatio (true)\n    width ( input width )\n    height (input height )\n    \n    *Experimental feature.\n\nMultiple outputs\n-\n\nSeveral outputs can be added to the media object, and when transcoding the data will be processed in parallel. This is quite convenient when generating thumbnails (which will be very cheap to generate), or if several output formats are required (will only require one decoding process of the input file):\n\n    navcodec.open('myinput.mov', function(err, media){\n      if(media){\n        media.addOutput('myoutput.mp4', {\n    \t    width:640,\n    \t    height:480,\n    \t    audioBitrate:128000,\n    \t    videoBitrate:500000\n        });\n    \n        media.addOutput('thumbnail.mp4', {\n    \t    width:80,\n    \t    height:60,\n    \t    skipAudio:true,\n    \t    videoBitrate:50000\n        });\n    \n        media.transcode(function(err, progress, time){\n          console.log(progress);\n          if(progress === 100){\n            console.log('total transcoding time:'+time);\n          }\n        });\n      }\n    });\n\n\n##Resolution video pyramid\n\nYou can use Navcodec to transcode a video into multiple resolutions, forming\na pyramid of resolutions, than can later be used to deliver the most efficient version for a given client in terms of screen resolution or bandwidth.\n\n    Media##addPyramid(basename: string, maxSize, minSize, options);\n\n\nSo for example, if you want to transcode to a pyramid of images similar to the ones in you tube:\n\n    media.addPyramid('new.mp4', {width: 1920}, {witdh: 240}, {keepAspectRatio: true, videoBitrate: '2000k'});\n\nThis will produce a pyramid of videos like the following:\n\n    1080-new.mp4\n    70\n\n\n##Jpeg Thumbnails\n\n\nA very common use case is the generation of a jpeg thumbnail to represent some video sequence. This can be easily accomplished by calling the function *thumbnail*. It can be called once or several times if different options are required. See the following example, where for every generated thumbnail a time offset is choosen:\n\n    \n    navcodec.open('myinput.mov', function(err, media){\n      if(media){\n        media.thumbnail([{'first128.jpg':1, 'secong128.jpg:100.5'},{width:128,height:128});\n        media.thumbnail([{'first64.jpg':1, 'secong64.jpg:100.5'},{width:64,height:64});\n        \n        media.transcode(function(err, progress, time){\n          console.log(progress);\n          if(progress === 100){\n            console.log('total transcoding time:'+time);\n          }\n        });\n      }\n    });\n\nNote that generating thumbnails at the same time as transcoding a full video is a extreamly cheap operation.\n\n\nMetadata\n-\n\nMetadata is available after opening the media file. Its just a javascript object with keys and values:\n\n    navcodec.open('walk.flac', function(err, media){\n      if(media){\n        console.log(media.metadata);\n      }\n    });\n\nThe previous example would result in the following output:\n\n    {\n      ARTIST: 'Foo Fighters',\n      TITLE: 'Walk',\n      ALBUM: 'Wasting Light',\n      DATE: '2011',\n      track: '11',\n      TOTALTRACKS: '11',\n      GENRE: 'Rock',\n      album_artist: 'Foo Fighters',\n      'ALBUM ARTIST': 'Foo Fighters',\n      COMMENT: 'EAC V1.0 beta 1, Secure Mode, Test & Copy, AccurateRip, FLAC 1.2.1b -8' \n    }\n\nBesides the 'metadata' property, other convenient properties are also available in the media object:\n\n    width\n    height\n    videoBitrate\n    audioBitrate\n    bitrate\n    samplerate\n    duration\n\nOptimize for Web\n-\n\nNormally, a mp4 file created by ffmpeg or any other transcoder, places the index at the end of the file (moov block). This makes impossible for a web browser to perform seeking until the whole file has been downloaded. \n\nNavcodec includes a useful utility called *relocateMoov* that will move the moov atom at the begining of the file, thus making it better for seeking in a web based player. Example:\n\n    navcodec.relocateMoov('myinput.mp4','myoutput.mp4', function(err){\n      if(err){\n        console.log(err);\n      }\n    });\n\n\nInstall\n-\n\nnavcodec depends on [libavcodec](http://libav.org), and this library\nmust be installed before you can install this module using npm. \n\nThe current version of libavcodec needed by navcodec is 0.9.1 and above. \n\nFor most unixes there are packages available, in ubuntu for example use *libavcodec-dev*. If you want you can also compile the source code with your preferred settings, this can be useful if you want to get the maximum performance from the library.\n\nFor Mac OSX use brew and install the ffmpeg package.\n\n\tbrew install ffmpeg\n\nNote that version 0.9.x of libavcodec is brand new and the afore mentioned package managers may not have yet updated it.\n\n\nWhen the libavcodec dependencies are fulfilled, just use npm to install the package:\n\n\tnpm install navcodec\n\n\nCompiling libavcodec (Recommended)\n-\n\n- Download the latest stable 0.9.x release from [libav.org](http://libav.org/download.html)\n\n- Uncompress the tarball, Ex:\n\n    tar -xvf libav-0.9.1.tar.gz\n    cd libav-0.9.1\n  \n- Configure your makefile, example:\n\n\t\t./configure  --prefix=/usr/local --enable-shared --enable-gpl --enable-version3 --enable-nonfree --enable-hardcoded-tables --cc=/usr/bin/clang --enable-libfaac --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libxvid --enable-libx264\n\t\t\nYou may want to add some hardware acceleration flags for your architecture, for example:\n\n    --enable-vda  (Mac OS)\n    --enable-vaapi (Linux/Unix Intel)\n    --enable-vdpau (Linux/Unix Nvidia)\n  \nyou can get a list of other configuration options using:\n\n\t./configure --help\n  \n- Compile the libraries:\n\n\t\tmake\n  \n- Install\n\n\t\tmake install\n\n- Notes\n\nMac users will need to install Xcode in order to be able to compile libavcodec by themselves. \n\nIt may be needed to install libvpx separatelly if you need WebM support (in Mac):\n\n    brew install libvpx\n\t\n\nReferences\n-\n\n[Ubuntu HOWTO: Install and use the latest FFmpeg and x264](http://ubuntuforums.org/showthread.php?t=786095)\n\nRoadmap\n-\n\n- Multiple pass encoding\n- Support presets\n- Support for filters\n\nLicense\n-\n\nCopyright(c) 2012 Optimal Bits Sweden AB. All rights reserved.\n \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n \n\n",
  "readmeFilename": "Readme.md",
  "_id": "navcodec@0.3.4",
  "_from": "navcodec"
}
